apiVersion: postgres-operator.crunchydata.com/v1beta1
kind: PostgresCluster
metadata:
  labels:
    app.kubernetes.io/component: postgres
    app.kubernetes.io/name: postgres
  name: postgres
  namespace: stasid-prod
spec:
  backups:
    pgbackrest:
      configuration:
      - secret:
          name: postgres-pgbackrest-config #need to change
      global:
        repo2-path: /pgo/chvk8/stasid-prod/postgres/repo2 #need to change
        repo2-retention-full: "30"
        repo2-retention-full-type: time
        repo2-s3-uri-style: path
        repo2-storage-ca-file: /etc/pgbackrest/conf.d/repo2-ca.crt #need to check
      image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest:ubi8-2.47-2
      manual:
        options:
        - --type=diff
        - --log-level-console=info
        repoName: repo2
      repos:
      - name: repo2
        s3:
          bucket: stasid-prod-backup #need to change
          endpoint: #need to change
          region: CHV #need to change
  customReplicationTLSSecret:
    name: postgres-replication-client-tls #need to check
  customTLSSecret:
    name: postgres-server-tls #need to check
  databaseInitSQL:
    key: init.sql
    name: postgres-init
  image: lzasirsubacr.azurecr.io/postgres/codit-postgres:ubi8-14.10-2.15.2-0
  imagePullSecrets:
  - name: pull-secret
  instances:
  - affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              postgres-operator.crunchydata.com/cluster: postgres
              postgres-operator.crunchydata.com/instance-set: instance1
          topologyKey: kubernetes.io/hostname
    dataVolumeClaimSpec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 400Gi #need to change
    metadata:
      labels:
        app.kubernetes.io/component: postgres
        app.kubernetes.io/name: postgres
        metrics: "true"
    name: instance1 #need to change #also modify the resource for now !
    replicas: 2
    resources:
      limits:
        cpu: "10"
        memory: 12Gi
      requests:
        cpu: "6"
        memory: 12Gi
  monitoring:
    pgmonitor:
      exporter:
        image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter:ubi8-5.5.0-0
  openshift: true
  patroni:
    dynamicConfiguration:
      postgresql:
        parameters:
          max_locks_per_transaction: 2048
          max_parallel_workers: 8
          max_parallel_workers_per_gather: 2
          max_pred_locks_per_transaction: 2048
          max_worker_processes: 26
          shared_buffers: 2GB
          shared_preload_libraries: pgaudit,timescaledb
          synchronous_commit: "on"
          synchronous_standby_names: '*'
          timescaledb.license: timescale
          timescaledb.max_background_workers: 16
          wal_keep_size: 2048
          wal_level: replica
          work_mem: 100MB
      synchronous_mode: true
    leaderLeaseDurationSeconds: 30
    port: 8008
    syncPeriodSeconds: 10
  paused: false
  port: 5432
  postgresVersion: 14
  proxy:
    pgBouncer:
      config:
        databases:
          '*': host=postgres-primary port=5432 #need to check
          stasid_datamart: host=postgres-primary port=5432 dbname=stasid_datamart #need to check
          stasid_datamart_reporting: host=postgres-replicas port=5432 dbname=stasid_datamart #need to check
        global:
          auth_dbname: postgres
          auth_type: cert
          client_tls_ciphers: secure
          client_tls_protocols: tlsv1.3
          client_tls_sslmode: verify-full
          default_pool_size: "50"
          max_client_conn: "100"
          max_prepared_statements: "250"
          pool_mode: transaction
          server_tls_ciphers: secure
      customTLSSecret:
        name: postgres-pgbouncer-server-tls #need to check
      image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer:ubi8-1.21-0
      metadata:
        labels:
          app.kubernetes.io/component: postgres
          app.kubernetes.io/name: proxy  
      port: 5432
      replicas: 1
      service:
        metadata:
          annotations:
            metallb.universe.tf/loadBalancerIPs: 10.0.43.112
          labels:
            app.kubernetes.io/component: postgres
            app.kubernetes.io/name: proxy
        type: LoadBalancer
  userInterface:
    pgAdmin:
      dataVolumeClaimSpec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 4Gi
      image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4:ubi8-4.30-22
      metadata:
        labels:
          app.kubernetes.io/component: postgres
          app.kubernetes.io/name: admin       
      replicas: 1
      service:
        metadata:
          labels:
            app.kubernetes.io/component: postgres
            app.kubernetes.io/name: admin 
        type: ClusterIP
  users: #can make user accordingly
  - name: research
    options: LOGIN
  - name: postgres
